<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-11-14" />
<meta name="version" content="1" />
<meta name="tags" content="Web, technology, WebRTC, demo." />
<meta name="description" content="WebRTC Demo 1" />

<style>
.sdp-box { border : 1px solid silver ; min-height : 20px ; xmax-height : 60px ; overflow : auto }
.demo .button { border : 1px solid black ; border-radius : 3px ; background-color : lightgrey ; padding : 1px 5px ; margin : 2px 5px }
.demo .button:first-child { margin-left : 0px }
body { margin : 0px 20px 0px 40px }
#message-to-peer { padding : 5px }
</style>
 
<title>WebRTC Demo 1</title>

</head><body>

<h1 id="peer-name">WebRTC Demo</h1>

<div class="demo">
<figcaption>Local Description</figcaption>
<div id="local-sdp" class="sdp-box"></div>
<p><span id="create-sdp-offer" class="button">&#x2460; Create SDP offer</span><span id="send-sdp-offer" class="button">&#x2461; Send offer to peer</span></p>

<figcaption>Remote Description</figcaption>
<div id="remote-sdp" class="sdp-box"></div>
<p><span id="receive-sdp-offer" class="button">&#x2462; Receive SDP offer</span><span id="accept-sdp-offer" class="button">&#x2463; Accept SDP offer</span></p>

<p><span id="create-sdp-answer" class="button">&#x2464; Create SDP answer</span><span id="send-sdp-answer" class="button">&#x2465; Send SDP answer</span></p>

<p><span id="receive-sdp-answer" class="button">&#x2466; Receive SDP answer</span><span id="accept-sdp-answer" class="button">&#x2467; Accept SDP answer</span></p>

<figcaption>Console Messages</figcaption>
<div id="messages" class="sdp-box"></div>

<figcaption>Messages from peer</figcaption>
<div id="messages-from-peer" class="sdp-box"></div>

<figcaption>Message to peer</figcaption>
<div id="message-to-peer" class="sdp-box" contenteditable="true"></div>
<p><span id="send-message" class="button">&#x2468; Send message</span></p>
</div>


<script>
( function ( ) {
	
	console.log( "Initializing peer" );

	// Set the peer name from URL
	const sp = ( new URL( document.location )).searchParams ;
	const peerName = sp.get( "peer-name" ) || "Unnamed Peer" ;
	document.getElementById( "peer-name" ).innerText = peerName;

	// Create the peer connection object

	const options = { 
		iceServers : [ {
			// URL of TURN server we are going to use
			urls: 'turn:my-turn-server.mycompany.com:19403',
			username: 'optional-username',
			credential: 'auth-token'
			} , {
			// URLs of STUN servers we are going to use
			urls: [ 'stun:stun1.1.google.com:19302', 'stun:stun2.1.google.com:19302' ] 
		}	]	} ;

	const peerConnection = new RTCPeerConnection( options );
	
	// Configure the peer connection object

	peerConnection
		.addEventListener( "icecandidate", async ( e ) => { 
		// Update local sdp offer text every time we get a new ICE candidate
		const sdp = JSON.stringify ( peerConnection.localDescription );
		console.log( "peerConnection.onIceCandidate" );
		console.log( sdp );
		if ( e.candidate ) document.getElementById( "local-sdp" ).innerHTML = sdp;
		} ) ;

	peerConnection.addEventListener( "datachannel", e => {
		console.log( "Data channel opened by remote peer" );
		const channel = e.channel;
		channel.addEventListener( "open", ( ) => {
			console.log( "Data channel to remote peer connected." );
			channel.send( "Hello from " + peerName );
			} ) ;
		channel.addEventListener( "message", ( e ) => { 
			console.log( "Message from peer:" );
			console.log( e.data );
			document.getElementById( "messages-from-peer" ).innerHTML 
				+= e.data + "<br/>" ;
			} ) ;
		channel.addEventListener( "close", ( ) => { 
			console.log( "Data channel to remote peer closed." );
			} ) ;
		} ) ;

	// Create the data channel on the local end 

	let dataChannel = peerConnection.createDataChannel( "data-channel"  );

	dataChannel.addEventListener( "open", ( ) => {
		console.log( "Connection to remote peer opened." );
		dataChannel.send( "Hello from " + peerName );
		} ) ;

	dataChannel.addEventListener( "message", e => {
		console.log( "Message from remote peer" );
		console.log( e.data );
		document.getElementById( "messages-from-peer" ).innerHTML += e.data + "<br/>" ;
		} ) ;

	dataChannel.addEventListener( "close", ( ) => {
		console.log( "Connection closed" );
		} ) ;

	// Add event listeners to the buttons

	document.getElementById( "create-sdp-offer" )
		.addEventListener( "click", async ( ) => {
			// Create the offer, set local description and copy
			// the string version into the GUI box.
			let description = await peerConnection.createOffer( );
			await peerConnection.setLocalDescription( description );
			console.log( "Local description for SDP offer created." );
		} ) ;

	document.getElementById( "send-sdp-offer" )
		.addEventListener( "click", ( ) => { 
		const description = JSON.stringify ( peerConnection.localDescription );
		navigator.clipboard.writeText( description );
		console.log( "SDP offer copied to clipboard" );
		} ) ;

	document.getElementById( "receive-sdp-offer" )
		.addEventListener( "click", async ( ) => {
		const offer = await navigator.clipboard.readText( )
		document.getElementById( "remote-sdp" ).innerText = offer ;
		console.log( "SDP offer retrieved from clipboard" );
		} ) ;

	document.getElementById( "accept-sdp-offer" )
		.addEventListener( "click", ( ) => {
		const description = JSON.parse ( document.getElementById( "remote-sdp" ).innerText );
		peerConnection.setRemoteDescription( description );
		console.log( "Remote description set from SDP offer" );
		} ) ;

	document.getElementById( "create-sdp-answer" )
		.addEventListener( "click", async ( ) => {
			// Create the answer and set local description.
			// This will generate IceCandidate events.
			// The SDP answer willl appear in the local sdp box.
			let description = await peerConnection.createAnswer( );
			await peerConnection.setLocalDescription( description );
			console.log( "Local description for SDP answer set." );
		} ) ;

	document.getElementById( "send-sdp-answer" )
		.addEventListener( "click", ( ) => { 
		const description = JSON.stringify ( peerConnection.localDescription );
		navigator.clipboard.writeText( description );
		console.log( "Local description for SDP answer copied to clipboard." );
		} ) ;

	document.getElementById( "receive-sdp-answer" )
		.addEventListener( "click", async ( ) => {
		const description = await navigator.clipboard.readText( )
		document.getElementById( "remote-sdp" ).innerText = description ;
		console.log( "Remote description of SDP answer retrieved from clipboard." );
		} ) ;

	document.getElementById( "accept-sdp-answer" )
		.addEventListener( "click", ( ) => {
		const description = JSON.parse ( document.getElementById( "remote-sdp" ).innerText );
		peerConnection.setRemoteDescription( description );
		console.log( "Remote description set from SDP answer." );
		} ) ;

	document.getElementById( "send-message" )
		.addEventListener( "click", ( ) => {
		const msgbox = document.getElementById( "message-to-peer" );
		dataChannel.send( msgbox.innerText );
		msgbox.innerText = "" ;
		} ) ;
		
	} ) ( ) ;

</script>
</body></html>